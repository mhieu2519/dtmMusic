
const { 
  Client, 
  GatewayIntentBits, 
  ActionRowBuilder, 
  AttachmentBuilder,  
  ButtonBuilder, 
  ButtonStyle, 
  MessageFlags, 
  StringSelectMenuBuilder ,

  } = require("discord.js");

const keepAlive = require("./server");
require("dotenv").config();

const bot = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildVoiceStates, // ƒê·ªÉ x·ª≠ l√Ω √¢m thanh
  ],
});

const { handleMusicCommand } = require("./music/music");
const { Player } = require('discord-player');
const { YoutubeiExtractor } = require('discord-player-youtubei'); // Import YoutubeiExtractor
const { SpotifyExtractor } = require('@discord-player/extractor'); // Import SpotifyExtractor
const ffmpegPath = require('ffmpeg-static'); // Import ffmpeg-static
// C·∫•u h√¨nh Discord Player
const player = new Player(bot,{
    ytdlOptions: {
      quality: 'highestaudio',
     filter: 'audioonly',
        highWaterMark: 1 << 25 // 32Mb
    },
  //skipFFmpeg: true, // B√°o cho discord-player bi·∫øt b·∫°n s·∫Ω cung c·∫•p FFmpeg
    connectionTimeout: 60000 // TƒÉng th·ªùi gian ch·ªù k·∫øt n·ªëi (v√≠ d·ª•: 60 gi√¢y)
}
);

// Ho·∫∑c n·∫øu b·∫°n mu·ªën thi·∫øt l·∫≠p cho t·∫•t c·∫£ c√°c extractor (c√°ch n√†y an to√†n h∆°n n·∫øu kh√¥ng ch·∫Øc ch·∫Øn)
 player.options.ffmpeg = { ffmpegPath: ffmpegPath };
// ƒêƒÉng k√Ω c√°c extractor
// YoutubeiExtractor cho YouTube (thay th·∫ø YoutubeExtractor c≈©)
player.extractors.register(YoutubeiExtractor, {});

// SpotifyExtractor cho Spotify
player.extractors.register(SpotifyExtractor, {
    client_id: process.env.SPOTIFY_CLIENT_ID,
    client_secret: process.env.SPOTIFY_CLIENT_SECRET,
    // B·∫°n c√≥ th·ªÉ th√™m c√°c t√πy ch·ªçn kh√°c n·∫øu c·∫ßn, v√≠ d·ª•: concurrency
});

console.log("‚úÖ FFmpeg static path:", ffmpegPath);
// --- X·ª≠ l√Ω c√°c s·ª± ki·ªán c·ªßa Discord Player ---
player.events.on('error', (queue, error) => {
  console.error(`‚ùå [error] L·ªói ph√°t nh·∫°c trong guild ${queue.guild.name}:`, error);
});

player.events.on('playerError', (queue, error) => {
  console.error(`‚ùå [playerError] L·ªói tr√¨nh ph√°t trong guild ${queue.guild.name}:`, error);
});

player.events.on('connectionError', (queue, error) => {
  console.error(`‚ùå [connectionError] K·∫øt n·ªëi voice l·ªói ·ªü ${queue.guild.name}:`, error);
});

player.on('error', (queue, error) => {
    console.error(`L·ªói trong h√†ng ƒë·ª£i c·ªßa ${queue?.guild?.name || 'unknown'}: ${error.message}`);
    if (queue?.metadata?.channel) {
        queue.metadata.channel.send(`‚ùå ƒê√£ x·∫£y ra l·ªói: ${error.message}`).catch(console.error);
    }
});

player.on('playerError', (queue, error) => {
    console.error(`L·ªói ph√°t nh·∫°c: ${error.message}`);
    if (queue?.metadata?.channel) {
        queue.metadata.channel.send(`‚ö†Ô∏è L·ªói khi ph√°t b√†i h√°t: ${error.message}`).catch(console.error);
    }
});

player.on('nodeError', (queue, error) => {
    console.error(`L·ªói Node trong h√†ng ƒë·ª£i c·ªßa ${queue?.guild?.name || 'unknown'}: ${error.message}`);
    if (queue?.metadata?.channel) {
        queue.metadata.channel.send(`üí• L·ªói h·ªá th·ªëng khi ph√°t nh·∫°c: ${error.message}`).catch(console.error);
    }
});

player.on('connectionError', (queue, error) => {
    console.error(`L·ªói k·∫øt n·ªëi voice trong h√†ng ƒë·ª£i c·ªßa ${queue?.guild?.name || 'unknown'}: ${error.message}`);
    if (queue?.metadata?.channel) {
        queue.metadata.channel.send(`üö´ L·ªói k·∫øt n·ªëi t·ªõi k√™nh tho·∫°i: ${error.message}`).catch(console.error);
    }
});

player.on('trackStart', (queue, track) => {
    if (queue?.metadata?.channel) {
        queue.metadata.channel.send(`üé∂ ƒêang ph√°t: **[${track.title}](${track.url})** c·ªßa **${track.author}**`);
    }
});

player.on('trackAdd', (queue, track) => {
    if (queue?.metadata?.channel) {
        queue.metadata.channel.send(`‚úÖ ƒê√£ th√™m b√†i h√°t: **[${track.title}](${track.url})** v√†o h√†ng ƒë·ª£i.`);
    }
});

player.on('tracksAdd', (queue, tracks) => {
    if (queue?.metadata?.channel) {
        queue.metadata.channel.send(`‚ûï ƒê√£ th√™m ${tracks.length} b√†i h√°t v√†o h√†ng ƒë·ª£i.`);
    }
});

player.on('queueEnd', (queue) => {
    if (queue?.metadata?.channel) {
        queue.metadata.channel.send('üì≠ H√†ng ƒë·ª£i ph√°t nh·∫°c ƒë√£ k·∫øt th√∫c.');
    }
});

player.on('emptyQueue', (queue) => {
    if (queue?.metadata?.channel) {
        queue.metadata.channel.send('üì™ Kh√¥ng c√≤n b√†i h√°t n√†o trong h√†ng ƒë·ª£i. Bot s·∫Ω r·ªùi k√™nh tho·∫°i.');
    }
});

player.on('disconnect', (queue) => {
    if (queue?.metadata?.channel) {
        queue.metadata.channel.send('‚ùé Bot ƒë√£ b·ªã ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh tho·∫°i.');
    }
});

// (Tu·ª≥ ch·ªçn) Log debug chi ti·∫øt khi c·∫ßn tracking l·ªói s√¢u h∆°n
// player.on('debug', (queue, message) => {
//     console.debug(`DEBUG - ${queue.guild.name}: ${message}`);
// });
// --- K·∫øt th√∫c c·∫•u h√¨nh Discord Player ---

// Command "/" schedule
bot.on("interactionCreate", async (interaction) => {

  if (interaction.isCommand()){
    switch (interaction.commandName) {
      case "music": {
       await handleMusicCommand(interaction, player);
        break; 
      }

    }}});




keepAlive()
bot.login(process.env.DISCORD_TOKEN) // S·ª≠ d·ª•ng token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
  .catch((err) => console.error("‚ùå Login failed:", err));
